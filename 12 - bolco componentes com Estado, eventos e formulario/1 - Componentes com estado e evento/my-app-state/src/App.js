/* Embora isso funcione, essa DEFINITIVAMENTE
nÃ£o Ã© a maneira correta de se criar eventos
em React! A funÃ§Ã£o se refere ao componente,
entÃ£o deve ser parte de sua classe!
ğŸ’¡ Se vocÃª quisesse chamar, no elemento, um evento passando um parÃ¢metro, vocÃª deveria trocar a sintaxe <button onClick{this.minhaFuncao} ...> por <button onClick={() => this.minhaFuncao('meu parametro')} . Basicamente, substitua a funÃ§Ã£o do evento por uma chamada Ã  mesma feita via callback! Experimente!
*/
import React from 'react';
class App extends React.Component{
   /* Repare que, diferentemente do HTML, no
  JSX vocÃª associa uma funÃ§Ã£o a um evento
  passando a prÃ³pria funÃ§Ã£o entre chaves `{}` */
  constructor() {
    // A funÃ§Ã£o `super()` Ã© chamada para garantir que a lÃ³gica interna do React rode **antes** da sua. Se nÃ£o for assim, o cÃ³digo nÃ£o funcionarÃ¡
    super()
    // Sua lÃ³gica extra vai aqui! O parÃ¢metro `props` Ã© opcional, para vocÃª acessar as props diretamente no construtor
    this.handleClick = this.handleClick.bind(this)
    this.state = {
      numeroCliques: 0,
    }

  }

  handleClick() {
    this.setState((estadoAnterior, _props) => ({
      numeroCliques: estadoAnterior.numeroCliques + 1

    }))
  }


  render() {
    console.log(this)
    return (
      <div>
        <button onClick={this.handleClick}> click  </button>
        <br/>
        <span>clicks= {this.state.numeroCliques}</span>
     </div>
    )
  }

}
export default App;
